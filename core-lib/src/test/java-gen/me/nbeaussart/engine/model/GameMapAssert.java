package me.nbeaussart.engine.model;

import org.assertj.core.api.AbstractAssert;
import org.assertj.core.internal.Iterables;

/**
 * {@link GameMap} specific assertions - Generated by CustomAssertionGenerator.
 */
public class GameMapAssert extends AbstractAssert<GameMapAssert, GameMap> {

  /**
   * Creates a new <code>{@link GameMapAssert}</code> to make assertions on actual GameMap.
   * @param actual the GameMap we want to make assertions on.
   */
  public GameMapAssert(GameMap actual) {
    super(actual, GameMapAssert.class);
  }

  /**
   * An entry point for GameMapAssert to follow AssertJ standard <code>assertThat()</code> statements.<br>
   * With a static import, one can write directly: <code>assertThat(myGameMap)</code> and get specific assertion with code completion.
   * @param actual the GameMap we want to make assertions on.
   * @return a new <code>{@link GameMapAssert}</code>
   */
  public static GameMapAssert assertThat(GameMap actual) {
    return new GameMapAssert(actual);
  }

  /**
   * Verifies that the actual GameMap's height is equal to the given one.
   * @param height the given height to compare the actual GameMap's height to.
   * @return this assertion object.
   * @throws AssertionError - if the actual GameMap's height is not equal to the given one.
   */
  public GameMapAssert hasHeight(int height) {
    // check that actual GameMap we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting height of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // check
    int actualHeight = actual.getHeight();
    if (actualHeight != height) {
      failWithMessage(assertjErrorMessage, actual, height, actualHeight);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual GameMap's mapData contains the given GameSquare elements.
   * @param mapData the given elements that should be contained in actual GameMap's mapData.
   * @return this assertion object.
   * @throws AssertionError if the actual GameMap's mapData does not contain all given GameSquare elements.
   */
  public GameMapAssert hasMapData(GameSquare... mapData) {
    // check that actual GameMap we want to make assertions on is not null.
    isNotNull();

    // check that given GameSquare varargs is not null.
    if (mapData == null) failWithMessage("Expecting mapData parameter not to be null.");
    
    // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
    Iterables.instance().assertContains(info, actual.getMapData(), mapData);

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual GameMap's mapData contains <b>only<b> the given GameSquare elements and nothing else in whatever order.
   * @param mapData the given elements that should be contained in actual GameMap's mapData.
   * @return this assertion object.
   * @throws AssertionError if the actual GameMap's mapData does not contain all given GameSquare elements.
   */
  public GameMapAssert hasOnlyMapData(GameSquare... mapData) {
    // check that actual GameMap we want to make assertions on is not null.
    isNotNull();

    // check that given GameSquare varargs is not null.
    if (mapData == null) failWithMessage("Expecting mapData parameter not to be null.");
    
    // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
    Iterables.instance().assertContainsOnly(info, actual.getMapData(), mapData);

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual GameMap's mapData does not contain the given GameSquare elements.
   *
   * @param mapData the given elements that should not be in actual GameMap's mapData.
   * @return this assertion object.
   * @throws AssertionError if the actual GameMap's mapData contains any given GameSquare elements.
   */
  public GameMapAssert doesNotHaveMapData(GameSquare... mapData) {
    // check that actual GameMap we want to make assertions on is not null.
    isNotNull();

    // check that given GameSquare varargs is not null.
    if (mapData == null) failWithMessage("Expecting mapData parameter not to be null.");
    
    // check with standard error message (use overridingErrorMessage before contains to set your own message).
    Iterables.instance().assertDoesNotContain(info, actual.getMapData(), mapData);

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual GameMap has no mapData.
   * @return this assertion object.
   * @throws AssertionError if the actual GameMap's mapData is not empty.
   */
  public GameMapAssert hasNoMapData() {
    // check that actual GameMap we want to make assertions on is not null.
    isNotNull();

    // we override the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting :\n  <%s>\nnot to have mapData but had :\n  <%s>";
    
    // check
    if (actual.getMapData().iterator().hasNext()) {
      failWithMessage(assertjErrorMessage, actual, actual.getMapData());
    }
    
    // return the current assertion for method chaining
    return this;
  }
  

  /**
   * Verifies that the actual GameMap's width is equal to the given one.
   * @param width the given width to compare the actual GameMap's width to.
   * @return this assertion object.
   * @throws AssertionError - if the actual GameMap's width is not equal to the given one.
   */
  public GameMapAssert hasWidth(int width) {
    // check that actual GameMap we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting width of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // check
    int actualWidth = actual.getWidth();
    if (actualWidth != width) {
      failWithMessage(assertjErrorMessage, actual, width, actualWidth);
    }

    // return the current assertion for method chaining
    return this;
  }

}
