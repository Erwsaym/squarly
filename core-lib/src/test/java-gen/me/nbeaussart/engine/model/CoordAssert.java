package me.nbeaussart.engine.model;

import org.assertj.core.api.AbstractAssert;

/**
 * {@link Coord} specific assertions - Generated by CustomAssertionGenerator.
 */
public class CoordAssert extends AbstractAssert<CoordAssert, Coord> {

  /**
   * Creates a new <code>{@link CoordAssert}</code> to make assertions on actual Coord.
   * @param actual the Coord we want to make assertions on.
   */
  public CoordAssert(Coord actual) {
    super(actual, CoordAssert.class);
  }

  /**
   * An entry point for CoordAssert to follow AssertJ standard <code>assertThat()</code> statements.<br>
   * With a static import, one can write directly: <code>assertThat(myCoord)</code> and get specific assertion with code completion.
   * @param actual the Coord we want to make assertions on.
   * @return a new <code>{@link CoordAssert}</code>
   */
  public static CoordAssert assertThat(Coord actual) {
    return new CoordAssert(actual);
  }

  /**
   * Verifies that the actual Coord's x is equal to the given one.
   * @param x the given x to compare the actual Coord's x to.
   * @return this assertion object.
   * @throws AssertionError - if the actual Coord's x is not equal to the given one.
   */
  public CoordAssert hasX(int x) {
    // check that actual Coord we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting x of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // check
    int actualX = actual.getX();
    if (actualX != x) {
      failWithMessage(assertjErrorMessage, actual, x, actualX);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual Coord's y is equal to the given one.
   * @param y the given y to compare the actual Coord's y to.
   * @return this assertion object.
   * @throws AssertionError - if the actual Coord's y is not equal to the given one.
   */
  public CoordAssert hasY(int y) {
    // check that actual Coord we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting y of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // check
    int actualY = actual.getY();
    if (actualY != y) {
      failWithMessage(assertjErrorMessage, actual, y, actualY);
    }

    // return the current assertion for method chaining
    return this;
  }

}
