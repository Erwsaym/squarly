package me.nbeaussart.engine.model;

import org.assertj.core.api.AbstractAssert;
import org.assertj.core.util.Objects;

/**
 * {@link GameSquare} specific assertions - Generated by CustomAssertionGenerator.
 */
public class GameSquareAssert extends AbstractAssert<GameSquareAssert, GameSquare> {

  /**
   * Creates a new <code>{@link GameSquareAssert}</code> to make assertions on actual GameSquare.
   * @param actual the GameSquare we want to make assertions on.
   */
  public GameSquareAssert(GameSquare actual) {
    super(actual, GameSquareAssert.class);
  }

  /**
   * An entry point for GameSquareAssert to follow AssertJ standard <code>assertThat()</code> statements.<br>
   * With a static import, one can write directly: <code>assertThat(myGameSquare)</code> and get specific assertion with code completion.
   * @param actual the GameSquare we want to make assertions on.
   * @return a new <code>{@link GameSquareAssert}</code>
   */
  public static GameSquareAssert assertThat(GameSquare actual) {
    return new GameSquareAssert(actual);
  }

  /**
   * Verifies that the actual GameSquare's color is equal to the given one.
   * @param color the given color to compare the actual GameSquare's color to.
   * @return this assertion object.
   * @throws AssertionError - if the actual GameSquare's color is not equal to the given one.
   */
  public GameSquareAssert hasColor(Color color) {
    // check that actual GameSquare we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting color of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    Color actualColor = actual.getColor();
    if (!Objects.areEqual(actualColor, color)) {
      failWithMessage(assertjErrorMessage, actual, color, actualColor);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual GameSquare's coords is equal to the given one.
   * @param coords the given coords to compare the actual GameSquare's coords to.
   * @return this assertion object.
   * @throws AssertionError - if the actual GameSquare's coords is not equal to the given one.
   */
  public GameSquareAssert hasCoords(Coord coords) {
    // check that actual GameSquare we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting coords of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    Coord actualCoords = actual.getCoords();
    if (!Objects.areEqual(actualCoords, coords)) {
      failWithMessage(assertjErrorMessage, actual, coords, actualCoords);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual GameSquare's gameMap is equal to the given one.
   * @param gameMap the given gameMap to compare the actual GameSquare's gameMap to.
   * @return this assertion object.
   * @throws AssertionError - if the actual GameSquare's gameMap is not equal to the given one.
   */
  public GameSquareAssert hasGameMap(GameMap gameMap) {
    // check that actual GameSquare we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting gameMap of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    GameMap actualGameMap = actual.getGameMap();
    if (!Objects.areEqual(actualGameMap, gameMap)) {
      failWithMessage(assertjErrorMessage, actual, gameMap, actualGameMap);
    }

    // return the current assertion for method chaining
    return this;
  }

}
