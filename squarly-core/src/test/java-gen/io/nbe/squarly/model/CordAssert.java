package io.nbe.squarly.model;

import org.assertj.core.api.AbstractAssert;

/**
 * {@link Cord} specific assertions - Generated by CustomAssertionGenerator.
 */
public class CordAssert extends AbstractAssert<CordAssert, Cord> {

  /**
   * Creates a new <code>{@link CordAssert}</code> to make assertions on actual Cord.
   * @param actual the Cord we want to make assertions on.
   */
  public CordAssert(Cord actual) {
    super(actual, CordAssert.class);
  }

  /**
   * An entry point for CordAssert to follow AssertJ standard <code>assertThat()</code> statements.<br>
   * With a static import, one can write directly: <code>assertThat(myCord)</code> and get specific assertion with code completion.
   * @param actual the Cord we want to make assertions on.
   * @return a new <code>{@link CordAssert}</code>
   */
  public static CordAssert assertThat(Cord actual) {
    return new CordAssert(actual);
  }

  /**
   * Verifies that the actual Cord's x is equal to the given one.
   * @param x the given x to compare the actual Cord's x to.
   * @return this assertion object.
   * @throws AssertionError - if the actual Cord's x is not equal to the given one.
   */
  public CordAssert hasX(int x) {
    // check that actual Cord we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting x of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // check
    int actualX = actual.getX();
    if (actualX != x) {
      failWithMessage(assertjErrorMessage, actual, x, actualX);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual Cord's y is equal to the given one.
   * @param y the given y to compare the actual Cord's y to.
   * @return this assertion object.
   * @throws AssertionError - if the actual Cord's y is not equal to the given one.
   */
  public CordAssert hasY(int y) {
    // check that actual Cord we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting y of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // check
    int actualY = actual.getY();
    if (actualY != y) {
      failWithMessage(assertjErrorMessage, actual, y, actualY);
    }

    // return the current assertion for method chaining
    return this;
  }

}
