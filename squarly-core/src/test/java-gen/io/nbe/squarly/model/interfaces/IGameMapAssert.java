package io.nbe.squarly.model.interfaces;

import org.assertj.core.api.AbstractAssert;
import org.assertj.core.internal.Iterables;
import org.assertj.core.util.Objects;

/**
 * {@link IGameMap} specific assertions - Generated by CustomAssertionGenerator.
 */
public class IGameMapAssert extends AbstractAssert<IGameMapAssert, IGameMap> {

  /**
   * Creates a new <code>{@link IGameMapAssert}</code> to make assertions on actual IGameMap.
   * @param actual the IGameMap we want to make assertions on.
   */
  public IGameMapAssert(IGameMap actual) {
    super(actual, IGameMapAssert.class);
  }

  /**
   * An entry point for IGameMapAssert to follow AssertJ standard <code>assertThat()</code> statements.<br>
   * With a static import, one can write directly: <code>assertThat(myIGameMap)</code> and get specific assertion with code completion.
   * @param actual the IGameMap we want to make assertions on.
   * @return a new <code>{@link IGameMapAssert}</code>
   */
  public static IGameMapAssert assertThat(IGameMap actual) {
    return new IGameMapAssert(actual);
  }

  /**
   * Verifies that the actual IGameMap's heightPixel is equal to the given one.
   * @param heightPixel the given heightPixel to compare the actual IGameMap's heightPixel to.
   * @return this assertion object.
   * @throws AssertionError - if the actual IGameMap's heightPixel is not equal to the given one.
   */
  public IGameMapAssert hasHeightPixel(int heightPixel) {
    // check that actual IGameMap we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting heightPixel of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // check
    int actualHeightPixel = actual.getHeightPixel();
    if (actualHeightPixel != heightPixel) {
      failWithMessage(assertjErrorMessage, actual, heightPixel, actualHeightPixel);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual IGameMap's mapData is equal to the given one.
   * @param mapData the given mapData to compare the actual IGameMap's mapData to.
   * @return this assertion object.
   * @throws AssertionError - if the actual IGameMap's mapData is not equal to the given one.
   */
  public IGameMapAssert hasMapData(java.util.Map mapData) {
    // check that actual IGameMap we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting mapData of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    java.util.Map actualMapData = actual.getMapData();
    if (!Objects.areEqual(actualMapData, mapData)) {
      failWithMessage(assertjErrorMessage, actual, mapData, actualMapData);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual IGameMap's updatesHandlers contains the given java.util.function.Consumer elements.
   * @param updatesHandlers the given elements that should be contained in actual IGameMap's updatesHandlers.
   * @return this assertion object.
   * @throws AssertionError if the actual IGameMap's updatesHandlers does not contain all given java.util.function.Consumer elements.
   */
  public IGameMapAssert hasUpdatesHandlers(java.util.function.Consumer... updatesHandlers) {
    // check that actual IGameMap we want to make assertions on is not null.
    isNotNull();

    // check that given java.util.function.Consumer varargs is not null.
    if (updatesHandlers == null) failWithMessage("Expecting updatesHandlers parameter not to be null.");
    
    // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
    Iterables.instance().assertContains(info, actual.getUpdatesHandlers(), updatesHandlers);

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual IGameMap's updatesHandlers contains <b>only<b> the given java.util.function.Consumer elements and nothing else in whatever order.
   * @param updatesHandlers the given elements that should be contained in actual IGameMap's updatesHandlers.
   * @return this assertion object.
   * @throws AssertionError if the actual IGameMap's updatesHandlers does not contain all given java.util.function.Consumer elements.
   */
  public IGameMapAssert hasOnlyUpdatesHandlers(java.util.function.Consumer... updatesHandlers) {
    // check that actual IGameMap we want to make assertions on is not null.
    isNotNull();

    // check that given java.util.function.Consumer varargs is not null.
    if (updatesHandlers == null) failWithMessage("Expecting updatesHandlers parameter not to be null.");
    
    // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
    Iterables.instance().assertContainsOnly(info, actual.getUpdatesHandlers(), updatesHandlers);

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual IGameMap's updatesHandlers does not contain the given java.util.function.Consumer elements.
   *
   * @param updatesHandlers the given elements that should not be in actual IGameMap's updatesHandlers.
   * @return this assertion object.
   * @throws AssertionError if the actual IGameMap's updatesHandlers contains any given java.util.function.Consumer elements.
   */
  public IGameMapAssert doesNotHaveUpdatesHandlers(java.util.function.Consumer... updatesHandlers) {
    // check that actual IGameMap we want to make assertions on is not null.
    isNotNull();

    // check that given java.util.function.Consumer varargs is not null.
    if (updatesHandlers == null) failWithMessage("Expecting updatesHandlers parameter not to be null.");
    
    // check with standard error message (use overridingErrorMessage before contains to set your own message).
    Iterables.instance().assertDoesNotContain(info, actual.getUpdatesHandlers(), updatesHandlers);

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual IGameMap has no updatesHandlers.
   * @return this assertion object.
   * @throws AssertionError if the actual IGameMap's updatesHandlers is not empty.
   */
  public IGameMapAssert hasNoUpdatesHandlers() {
    // check that actual IGameMap we want to make assertions on is not null.
    isNotNull();

    // we override the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting :\n  <%s>\nnot to have updatesHandlers but had :\n  <%s>";
    
    // check
    if (actual.getUpdatesHandlers().iterator().hasNext()) {
      failWithMessage(assertjErrorMessage, actual, actual.getUpdatesHandlers());
    }
    
    // return the current assertion for method chaining
    return this;
  }
  

  /**
   * Verifies that the actual IGameMap's widthPixel is equal to the given one.
   * @param widthPixel the given widthPixel to compare the actual IGameMap's widthPixel to.
   * @return this assertion object.
   * @throws AssertionError - if the actual IGameMap's widthPixel is not equal to the given one.
   */
  public IGameMapAssert hasWidthPixel(int widthPixel) {
    // check that actual IGameMap we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting widthPixel of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // check
    int actualWidthPixel = actual.getWidthPixel();
    if (actualWidthPixel != widthPixel) {
      failWithMessage(assertjErrorMessage, actual, widthPixel, actualWidthPixel);
    }

    // return the current assertion for method chaining
    return this;
  }

}
