package io.nbe.squarly.model.interfaces;

import org.assertj.core.api.AbstractAssert;
import org.assertj.core.util.Objects;

/**
 * {@link IColoredSquare} specific assertions - Generated by CustomAssertionGenerator.
 */
public class IColoredSquareAssert extends AbstractAssert<IColoredSquareAssert, IColoredSquare> {

  /**
   * Creates a new <code>{@link IColoredSquareAssert}</code> to make assertions on actual IColoredSquare.
   * @param actual the IColoredSquare we want to make assertions on.
   */
  public IColoredSquareAssert(IColoredSquare actual) {
    super(actual, IColoredSquareAssert.class);
  }

  /**
   * An entry point for IColoredSquareAssert to follow AssertJ standard <code>assertThat()</code> statements.<br>
   * With a static import, one can write directly: <code>assertThat(myIColoredSquare)</code> and get specific assertion with code completion.
   * @param actual the IColoredSquare we want to make assertions on.
   * @return a new <code>{@link IColoredSquareAssert}</code>
   */
  public static IColoredSquareAssert assertThat(IColoredSquare actual) {
    return new IColoredSquareAssert(actual);
  }

  /**
   * Verifies that the actual IColoredSquare's color is equal to the given one.
   * @param color the given color to compare the actual IColoredSquare's color to.
   * @return this assertion object.
   * @throws AssertionError - if the actual IColoredSquare's color is not equal to the given one.
   */
  public IColoredSquareAssert hasColor(io.nbe.squarly.model.Color color) {
    // check that actual IColoredSquare we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting color of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    io.nbe.squarly.model.Color actualColor = actual.getColor();
    if (!Objects.areEqual(actualColor, color)) {
      failWithMessage(assertjErrorMessage, actual, color, actualColor);
    }

    // return the current assertion for method chaining
    return this;
  }

}
