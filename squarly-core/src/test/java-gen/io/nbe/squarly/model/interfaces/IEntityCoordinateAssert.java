package io.nbe.squarly.model.interfaces;

import org.assertj.core.api.AbstractAssert;
import org.assertj.core.util.Objects;

/**
 * {@link IEntityCoordinate} specific assertions - Generated by CustomAssertionGenerator.
 */
public class IEntityCoordinateAssert extends AbstractAssert<IEntityCoordinateAssert, IEntityCoordinate> {

  /**
   * Creates a new <code>{@link IEntityCoordinateAssert}</code> to make assertions on actual IEntityCoordinate.
   * @param actual the IEntityCoordinate we want to make assertions on.
   */
  public IEntityCoordinateAssert(IEntityCoordinate actual) {
    super(actual, IEntityCoordinateAssert.class);
  }

  /**
   * An entry point for IEntityCoordinateAssert to follow AssertJ standard <code>assertThat()</code> statements.<br>
   * With a static import, one can write directly: <code>assertThat(myIEntityCoordinate)</code> and get specific assertion with code completion.
   * @param actual the IEntityCoordinate we want to make assertions on.
   * @return a new <code>{@link IEntityCoordinateAssert}</code>
   */
  public static IEntityCoordinateAssert assertThat(IEntityCoordinate actual) {
    return new IEntityCoordinateAssert(actual);
  }

  /**
   * Verifies that the actual IEntityCoordinate's cord is equal to the given one.
   * @param cord the given cord to compare the actual IEntityCoordinate's cord to.
   * @return this assertion object.
   * @throws AssertionError - if the actual IEntityCoordinate's cord is not equal to the given one.
   */
  public IEntityCoordinateAssert hasCord(io.nbe.squarly.model.Cord cord) {
    // check that actual IEntityCoordinate we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting cord of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    io.nbe.squarly.model.Cord actualCord = actual.getCord();
    if (!Objects.areEqual(actualCord, cord)) {
      failWithMessage(assertjErrorMessage, actual, cord, actualCord);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual IEntityCoordinate's map is equal to the given one.
   * @param map the given map to compare the actual IEntityCoordinate's map to.
   * @return this assertion object.
   * @throws AssertionError - if the actual IEntityCoordinate's map is not equal to the given one.
   */
  public IEntityCoordinateAssert hasMap(ICoordinateSquare map) {
    // check that actual IEntityCoordinate we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting map of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    ICoordinateSquare actualMap = actual.getMap();
    if (!Objects.areEqual(actualMap, map)) {
      failWithMessage(assertjErrorMessage, actual, map, actualMap);
    }

    // return the current assertion for method chaining
    return this;
  }

}
