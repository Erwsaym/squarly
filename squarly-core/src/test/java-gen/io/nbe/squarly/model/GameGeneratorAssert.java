package io.nbe.squarly.model;

import org.assertj.core.api.AbstractAssert;
import org.assertj.core.util.Objects;

/**
 * {@link GameGenerator} specific assertions - Generated by CustomAssertionGenerator.
 */
public class GameGeneratorAssert extends AbstractAssert<GameGeneratorAssert, GameGenerator> {

  /**
   * Creates a new <code>{@link GameGeneratorAssert}</code> to make assertions on actual GameGenerator.
   * @param actual the GameGenerator we want to make assertions on.
   */
  public GameGeneratorAssert(GameGenerator actual) {
    super(actual, GameGeneratorAssert.class);
  }

  /**
   * An entry point for GameGeneratorAssert to follow AssertJ standard <code>assertThat()</code> statements.<br>
   * With a static import, one can write directly: <code>assertThat(myGameGenerator)</code> and get specific assertion with code completion.
   * @param actual the GameGenerator we want to make assertions on.
   * @return a new <code>{@link GameGeneratorAssert}</code>
   */
  public static GameGeneratorAssert assertThat(GameGenerator actual) {
    return new GameGeneratorAssert(actual);
  }

  /**
   * Verifies that the actual GameGenerator's gameMap is equal to the given one.
   * @param gameMap the given gameMap to compare the actual GameGenerator's gameMap to.
   * @return this assertion object.
   * @throws AssertionError - if the actual GameGenerator's gameMap is not equal to the given one.
   */
  public GameGeneratorAssert hasGameMap(io.nbe.squarly.model.interfaces.IGameMap gameMap) {
    // check that actual GameGenerator we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting gameMap of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    io.nbe.squarly.model.interfaces.IGameMap actualGameMap = actual.getGameMap();
    if (!Objects.areEqual(actualGameMap, gameMap)) {
      failWithMessage(assertjErrorMessage, actual, gameMap, actualGameMap);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual GameGenerator is showing.
   * @return this assertion object.
   * @throws AssertionError - if the actual GameGenerator is not showing.
   */
  public GameGeneratorAssert isShowing() {
    // check that actual GameGenerator we want to make assertions on is not null.
    isNotNull();

    // check
    if (!actual.isShowing()) {
      failWithMessage("\nExpecting that actual GameGenerator is showing but is not.");
    }
    
    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual GameGenerator is not showing.
   * @return this assertion object.
   * @throws AssertionError - if the actual GameGenerator is showing.
   */
  public GameGeneratorAssert isNotShowing() {
    // check that actual GameGenerator we want to make assertions on is not null.
    isNotNull();

    // check
    if (actual.isShowing()) {
      failWithMessage("\nExpecting that actual GameGenerator is not showing but is.");
    }
    
    // return the current assertion for method chaining
    return this;
  }

}
