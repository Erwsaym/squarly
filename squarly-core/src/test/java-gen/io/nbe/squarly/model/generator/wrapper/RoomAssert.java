package io.nbe.squarly.model.generator.wrapper;

import org.assertj.core.api.AbstractAssert;
import org.assertj.core.internal.Iterables;
import org.assertj.core.util.Objects;

/**
 * {@link Room} specific assertions - Generated by CustomAssertionGenerator.
 */
public class RoomAssert extends AbstractAssert<RoomAssert, Room> {

  /**
   * Creates a new <code>{@link RoomAssert}</code> to make assertions on actual Room.
   * @param actual the Room we want to make assertions on.
   */
  public RoomAssert(Room actual) {
    super(actual, RoomAssert.class);
  }

  /**
   * An entry point for RoomAssert to follow AssertJ standard <code>assertThat()</code> statements.<br>
   * With a static import, one can write directly: <code>assertThat(myRoom)</code> and get specific assertion with code completion.
   * @param actual the Room we want to make assertions on.
   * @return a new <code>{@link RoomAssert}</code>
   */
  public static RoomAssert assertThat(Room actual) {
    return new RoomAssert(actual);
  }

  /**
   * Verifies that the actual Room can be placed.
   * @return this assertion object.
   * @throws AssertionError - if the actual Room cannot be placed.
   */
  public RoomAssert canBePlaced() {
    // check that actual Room we want to make assertions on is not null.
    isNotNull();

    // check
    if (!actual.canBePlaced()) {
      failWithMessage("\nExpecting that actual Room can be placed but cannot.");
    }
    
    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual Room cannot be placed.
   * @return this assertion object.
   * @throws AssertionError - if the actual Room can be placed.
   */
  public RoomAssert cannotBePlaced() {
    // check that actual Room we want to make assertions on is not null.
    isNotNull();

    // check
    if (actual.canBePlaced()) {
      failWithMessage("\nExpecting that actual Room cannot be placed but can.");
    }
    
    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual Room can be placed old.
   * @return this assertion object.
   * @throws AssertionError - if the actual Room cannot be placed old.
   */
  public RoomAssert canBePlacedOld() {
    // check that actual Room we want to make assertions on is not null.
    isNotNull();

    // check
    if (!actual.canBePlacedOld()) {
      failWithMessage("\nExpecting that actual Room can be placed old but cannot.");
    }
    
    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual Room cannot be placed old.
   * @return this assertion object.
   * @throws AssertionError - if the actual Room can be placed old.
   */
  public RoomAssert cannotBePlacedOld() {
    // check that actual Room we want to make assertions on is not null.
    isNotNull();

    // check
    if (actual.canBePlacedOld()) {
      failWithMessage("\nExpecting that actual Room cannot be placed old but can.");
    }
    
    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual Room's gameMapWrapper is equal to the given one.
   * @param gameMapWrapper the given gameMapWrapper to compare the actual Room's gameMapWrapper to.
   * @return this assertion object.
   * @throws AssertionError - if the actual Room's gameMapWrapper is not equal to the given one.
   */
  public RoomAssert hasGameMapWrapper(GameMapWrapper gameMapWrapper) {
    // check that actual Room we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting gameMapWrapper of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    GameMapWrapper actualGameMapWrapper = actual.getGameMapWrapper();
    if (!Objects.areEqual(actualGameMapWrapper, gameMapWrapper)) {
      failWithMessage(assertjErrorMessage, actual, gameMapWrapper, actualGameMapWrapper);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual Room's height is equal to the given one.
   * @param height the given height to compare the actual Room's height to.
   * @return this assertion object.
   * @throws AssertionError - if the actual Room's height is not equal to the given one.
   */
  public RoomAssert hasHeight(int height) {
    // check that actual Room we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting height of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // check
    int actualHeight = actual.getHeight();
    if (actualHeight != height) {
      failWithMessage(assertjErrorMessage, actual, height, actualHeight);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual Room's neigh contains the given SquareWrapper elements.
   * @param neigh the given elements that should be contained in actual Room's neigh.
   * @return this assertion object.
   * @throws AssertionError if the actual Room's neigh does not contain all given SquareWrapper elements.
   */
  public RoomAssert hasNeigh(SquareWrapper... neigh) {
    // check that actual Room we want to make assertions on is not null.
    isNotNull();

    // check that given SquareWrapper varargs is not null.
    if (neigh == null) failWithMessage("Expecting neigh parameter not to be null.");
    
    // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
    Iterables.instance().assertContains(info, actual.getNeigh(), neigh);

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual Room's neigh contains <b>only<b> the given SquareWrapper elements and nothing else in whatever order.
   * @param neigh the given elements that should be contained in actual Room's neigh.
   * @return this assertion object.
   * @throws AssertionError if the actual Room's neigh does not contain all given SquareWrapper elements.
   */
  public RoomAssert hasOnlyNeigh(SquareWrapper... neigh) {
    // check that actual Room we want to make assertions on is not null.
    isNotNull();

    // check that given SquareWrapper varargs is not null.
    if (neigh == null) failWithMessage("Expecting neigh parameter not to be null.");
    
    // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
    Iterables.instance().assertContainsOnly(info, actual.getNeigh(), neigh);

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual Room's neigh does not contain the given SquareWrapper elements.
   *
   * @param neigh the given elements that should not be in actual Room's neigh.
   * @return this assertion object.
   * @throws AssertionError if the actual Room's neigh contains any given SquareWrapper elements.
   */
  public RoomAssert doesNotHaveNeigh(SquareWrapper... neigh) {
    // check that actual Room we want to make assertions on is not null.
    isNotNull();

    // check that given SquareWrapper varargs is not null.
    if (neigh == null) failWithMessage("Expecting neigh parameter not to be null.");
    
    // check with standard error message (use overridingErrorMessage before contains to set your own message).
    Iterables.instance().assertDoesNotContain(info, actual.getNeigh(), neigh);

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual Room has no neigh.
   * @return this assertion object.
   * @throws AssertionError if the actual Room's neigh is not empty.
   */
  public RoomAssert hasNoNeigh() {
    // check that actual Room we want to make assertions on is not null.
    isNotNull();

    // we override the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting :\n  <%s>\nnot to have neigh but had :\n  <%s>";
    
    // check
    if (actual.getNeigh().iterator().hasNext()) {
      failWithMessage(assertjErrorMessage, actual, actual.getNeigh());
    }
    
    // return the current assertion for method chaining
    return this;
  }
  

  /**
   * Verifies that the actual Room's otherCorner is equal to the given one.
   * @param otherCorner the given otherCorner to compare the actual Room's otherCorner to.
   * @return this assertion object.
   * @throws AssertionError - if the actual Room's otherCorner is not equal to the given one.
   */
  public RoomAssert hasOtherCorner(io.nbe.squarly.model.Cord otherCorner) {
    // check that actual Room we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting otherCorner of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    io.nbe.squarly.model.Cord actualOtherCorner = actual.getOtherCorner();
    if (!Objects.areEqual(actualOtherCorner, otherCorner)) {
      failWithMessage(assertjErrorMessage, actual, otherCorner, actualOtherCorner);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual Room's startingCords is equal to the given one.
   * @param startingCords the given startingCords to compare the actual Room's startingCords to.
   * @return this assertion object.
   * @throws AssertionError - if the actual Room's startingCords is not equal to the given one.
   */
  public RoomAssert hasStartingCords(io.nbe.squarly.model.Cord startingCords) {
    // check that actual Room we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting startingCords of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    io.nbe.squarly.model.Cord actualStartingCords = actual.getStartingCords();
    if (!Objects.areEqual(actualStartingCords, startingCords)) {
      failWithMessage(assertjErrorMessage, actual, startingCords, actualStartingCords);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual Room's width is equal to the given one.
   * @param width the given width to compare the actual Room's width to.
   * @return this assertion object.
   * @throws AssertionError - if the actual Room's width is not equal to the given one.
   */
  public RoomAssert hasWidth(int width) {
    // check that actual Room we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting width of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // check
    int actualWidth = actual.getWidth();
    if (actualWidth != width) {
      failWithMessage(assertjErrorMessage, actual, width, actualWidth);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual Room is connected.
   * @return this assertion object.
   * @throws AssertionError - if the actual Room is not connected.
   */
  public RoomAssert isConnected() {
    // check that actual Room we want to make assertions on is not null.
    isNotNull();

    // check
    if (!actual.isConnected()) {
      failWithMessage("\nExpecting that actual Room is connected but is not.");
    }
    
    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual Room is not connected.
   * @return this assertion object.
   * @throws AssertionError - if the actual Room is connected.
   */
  public RoomAssert isNotConnected() {
    // check that actual Room we want to make assertions on is not null.
    isNotNull();

    // check
    if (actual.isConnected()) {
      failWithMessage("\nExpecting that actual Room is not connected but is.");
    }
    
    // return the current assertion for method chaining
    return this;
  }

}
