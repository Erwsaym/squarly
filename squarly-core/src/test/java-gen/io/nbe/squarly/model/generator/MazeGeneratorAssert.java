package io.nbe.squarly.model.generator;

import org.assertj.core.api.AbstractAssert;
import org.assertj.core.util.Objects;

/**
 * {@link MazeGenerator} specific assertions - Generated by CustomAssertionGenerator.
 */
public class MazeGeneratorAssert extends AbstractAssert<MazeGeneratorAssert, MazeGenerator> {

  /**
   * Creates a new <code>{@link MazeGeneratorAssert}</code> to make assertions on actual MazeGenerator.
   * @param actual the MazeGenerator we want to make assertions on.
   */
  public MazeGeneratorAssert(MazeGenerator actual) {
    super(actual, MazeGeneratorAssert.class);
  }

  /**
   * An entry point for MazeGeneratorAssert to follow AssertJ standard <code>assertThat()</code> statements.<br>
   * With a static import, one can write directly: <code>assertThat(myMazeGenerator)</code> and get specific assertion with code completion.
   * @param actual the MazeGenerator we want to make assertions on.
   * @return a new <code>{@link MazeGeneratorAssert}</code>
   */
  public static MazeGeneratorAssert assertThat(MazeGenerator actual) {
    return new MazeGeneratorAssert(actual);
  }

  /**
   * Verifies that the actual MazeGenerator's gameGenerator is equal to the given one.
   * @param gameGenerator the given gameGenerator to compare the actual MazeGenerator's gameGenerator to.
   * @return this assertion object.
   * @throws AssertionError - if the actual MazeGenerator's gameGenerator is not equal to the given one.
   */
  public MazeGeneratorAssert hasGameGenerator(io.nbe.squarly.model.GameGenerator gameGenerator) {
    // check that actual MazeGenerator we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting gameGenerator of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    io.nbe.squarly.model.GameGenerator actualGameGenerator = actual.getGameGenerator();
    if (!Objects.areEqual(actualGameGenerator, gameGenerator)) {
      failWithMessage(assertjErrorMessage, actual, gameGenerator, actualGameGenerator);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual MazeGenerator's mapWrapper is equal to the given one.
   * @param mapWrapper the given mapWrapper to compare the actual MazeGenerator's mapWrapper to.
   * @return this assertion object.
   * @throws AssertionError - if the actual MazeGenerator's mapWrapper is not equal to the given one.
   */
  public MazeGeneratorAssert hasMapWrapper(io.nbe.squarly.model.generator.wrapper.GameMapWrapper mapWrapper) {
    // check that actual MazeGenerator we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting mapWrapper of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    io.nbe.squarly.model.generator.wrapper.GameMapWrapper actualMapWrapper = actual.getMapWrapper();
    if (!Objects.areEqual(actualMapWrapper, mapWrapper)) {
      failWithMessage(assertjErrorMessage, actual, mapWrapper, actualMapWrapper);
    }

    // return the current assertion for method chaining
    return this;
  }

}
