package io.nbe.squarly.model.interfaces;

import org.assertj.core.api.AbstractAssert;
import org.assertj.core.util.Objects;

/**
 * {@link ICaracterSquare} specific assertions - Generated by CustomAssertionGenerator.
 */
public class ICaracterSquareAssert extends AbstractAssert<ICaracterSquareAssert, ICaracterSquare> {

  /**
   * Creates a new <code>{@link ICaracterSquareAssert}</code> to make assertions on actual ICaracterSquare.
   * @param actual the ICaracterSquare we want to make assertions on.
   */
  public ICaracterSquareAssert(ICaracterSquare actual) {
    super(actual, ICaracterSquareAssert.class);
  }

  /**
   * An entry point for ICaracterSquareAssert to follow AssertJ standard <code>assertThat()</code> statements.<br>
   * With a static import, one can write directly: <code>assertThat(myICaracterSquare)</code> and get specific assertion with code completion.
   * @param actual the ICaracterSquare we want to make assertions on.
   * @return a new <code>{@link ICaracterSquareAssert}</code>
   */
  public static ICaracterSquareAssert assertThat(ICaracterSquare actual) {
    return new ICaracterSquareAssert(actual);
  }

  /**
   * Verifies that the actual ICaracterSquare's background is equal to the given one.
   * @param background the given background to compare the actual ICaracterSquare's background to.
   * @return this assertion object.
   * @throws AssertionError - if the actual ICaracterSquare's background is not equal to the given one.
   */
  public ICaracterSquareAssert hasBackground(io.nbe.squarly.model.Color background) {
    // check that actual ICaracterSquare we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting background of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    io.nbe.squarly.model.Color actualBackground = actual.getBackground();
    if (!Objects.areEqual(actualBackground, background)) {
      failWithMessage(assertjErrorMessage, actual, background, actualBackground);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual ICaracterSquare's char is equal to the given one.
   * @param expectedChar the given char to compare the actual ICaracterSquare's char to.
   * @return this assertion object.
   * @throws AssertionError - if the actual ICaracterSquare's char is not equal to the given one.
   */
  public ICaracterSquareAssert hasChar(char expectedChar) {
    // check that actual ICaracterSquare we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting char of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // check
    char actualChar = actual.getChar();
    if (actualChar != expectedChar) {
      failWithMessage(assertjErrorMessage, actual, expectedChar, actualChar);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual ICaracterSquare's foreground is equal to the given one.
   * @param foreground the given foreground to compare the actual ICaracterSquare's foreground to.
   * @return this assertion object.
   * @throws AssertionError - if the actual ICaracterSquare's foreground is not equal to the given one.
   */
  public ICaracterSquareAssert hasForeground(io.nbe.squarly.model.Color foreground) {
    // check that actual ICaracterSquare we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting foreground of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    io.nbe.squarly.model.Color actualForeground = actual.getForeground();
    if (!Objects.areEqual(actualForeground, foreground)) {
      failWithMessage(assertjErrorMessage, actual, foreground, actualForeground);
    }

    // return the current assertion for method chaining
    return this;
  }

}
