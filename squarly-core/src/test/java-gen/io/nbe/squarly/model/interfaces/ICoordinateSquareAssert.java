package io.nbe.squarly.model.interfaces;

import org.assertj.core.api.AbstractAssert;
import org.assertj.core.internal.Iterables;
import org.assertj.core.util.Objects;

/**
 * {@link ICoordinateSquare} specific assertions - Generated by CustomAssertionGenerator.
 */
public class ICoordinateSquareAssert extends AbstractAssert<ICoordinateSquareAssert, ICoordinateSquare> {

  /**
   * Creates a new <code>{@link ICoordinateSquareAssert}</code> to make assertions on actual ICoordinateSquare.
   * @param actual the ICoordinateSquare we want to make assertions on.
   */
  public ICoordinateSquareAssert(ICoordinateSquare actual) {
    super(actual, ICoordinateSquareAssert.class);
  }

  /**
   * An entry point for ICoordinateSquareAssert to follow AssertJ standard <code>assertThat()</code> statements.<br>
   * With a static import, one can write directly: <code>assertThat(myICoordinateSquare)</code> and get specific assertion with code completion.
   * @param actual the ICoordinateSquare we want to make assertions on.
   * @return a new <code>{@link ICoordinateSquareAssert}</code>
   */
  public static ICoordinateSquareAssert assertThat(ICoordinateSquare actual) {
    return new ICoordinateSquareAssert(actual);
  }

  /**
   * Verifies that the actual ICoordinateSquare's cord is equal to the given one.
   * @param cord the given cord to compare the actual ICoordinateSquare's cord to.
   * @return this assertion object.
   * @throws AssertionError - if the actual ICoordinateSquare's cord is not equal to the given one.
   */
  public ICoordinateSquareAssert hasCord(io.nbe.squarly.model.Cord cord) {
    // check that actual ICoordinateSquare we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting cord of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    io.nbe.squarly.model.Cord actualCord = actual.getCord();
    if (!Objects.areEqual(actualCord, cord)) {
      failWithMessage(assertjErrorMessage, actual, cord, actualCord);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual ICoordinateSquare's gameMap is equal to the given one.
   * @param gameMap the given gameMap to compare the actual ICoordinateSquare's gameMap to.
   * @return this assertion object.
   * @throws AssertionError - if the actual ICoordinateSquare's gameMap is not equal to the given one.
   */
  public ICoordinateSquareAssert hasGameMap(IGameMap gameMap) {
    // check that actual ICoordinateSquare we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting gameMap of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    IGameMap actualGameMap = actual.getGameMap();
    if (!Objects.areEqual(actualGameMap, gameMap)) {
      failWithMessage(assertjErrorMessage, actual, gameMap, actualGameMap);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual ICoordinateSquare's neighbors contains the given ICoordinateSquare elements.
   * @param neighbors the given elements that should be contained in actual ICoordinateSquare's neighbors.
   * @return this assertion object.
   * @throws AssertionError if the actual ICoordinateSquare's neighbors does not contain all given ICoordinateSquare elements.
   */
  public ICoordinateSquareAssert hasNeighbors(ICoordinateSquare... neighbors) {
    // check that actual ICoordinateSquare we want to make assertions on is not null.
    isNotNull();

    // check that given ICoordinateSquare varargs is not null.
    if (neighbors == null) failWithMessage("Expecting neighbors parameter not to be null.");
    
    // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
    Iterables.instance().assertContains(info, actual.getNeighbors(), neighbors);

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual ICoordinateSquare's neighbors contains <b>only<b> the given ICoordinateSquare elements and nothing else in whatever order.
   * @param neighbors the given elements that should be contained in actual ICoordinateSquare's neighbors.
   * @return this assertion object.
   * @throws AssertionError if the actual ICoordinateSquare's neighbors does not contain all given ICoordinateSquare elements.
   */
  public ICoordinateSquareAssert hasOnlyNeighbors(ICoordinateSquare... neighbors) {
    // check that actual ICoordinateSquare we want to make assertions on is not null.
    isNotNull();

    // check that given ICoordinateSquare varargs is not null.
    if (neighbors == null) failWithMessage("Expecting neighbors parameter not to be null.");
    
    // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
    Iterables.instance().assertContainsOnly(info, actual.getNeighbors(), neighbors);

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual ICoordinateSquare's neighbors does not contain the given ICoordinateSquare elements.
   *
   * @param neighbors the given elements that should not be in actual ICoordinateSquare's neighbors.
   * @return this assertion object.
   * @throws AssertionError if the actual ICoordinateSquare's neighbors contains any given ICoordinateSquare elements.
   */
  public ICoordinateSquareAssert doesNotHaveNeighbors(ICoordinateSquare... neighbors) {
    // check that actual ICoordinateSquare we want to make assertions on is not null.
    isNotNull();

    // check that given ICoordinateSquare varargs is not null.
    if (neighbors == null) failWithMessage("Expecting neighbors parameter not to be null.");
    
    // check with standard error message (use overridingErrorMessage before contains to set your own message).
    Iterables.instance().assertDoesNotContain(info, actual.getNeighbors(), neighbors);

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual ICoordinateSquare has no neighbors.
   * @return this assertion object.
   * @throws AssertionError if the actual ICoordinateSquare's neighbors is not empty.
   */
  public ICoordinateSquareAssert hasNoNeighbors() {
    // check that actual ICoordinateSquare we want to make assertions on is not null.
    isNotNull();

    // we override the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting :\n  <%s>\nnot to have neighbors but had :\n  <%s>";
    
    // check
    if (actual.getNeighbors().iterator().hasNext()) {
      failWithMessage(assertjErrorMessage, actual, actual.getNeighbors());
    }
    
    // return the current assertion for method chaining
    return this;
  }
  

  /**
   * Verifies that the actual ICoordinateSquare's state is equal to the given one.
   * @param state the given state to compare the actual ICoordinateSquare's state to.
   * @return this assertion object.
   * @throws AssertionError - if the actual ICoordinateSquare's state is not equal to the given one.
   */
  public ICoordinateSquareAssert hasState(IState state) {
    // check that actual ICoordinateSquare we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting state of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    IState actualState = actual.getState();
    if (!Objects.areEqual(actualState, state)) {
      failWithMessage(assertjErrorMessage, actual, state, actualState);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual ICoordinateSquare is opaque.
   * @return this assertion object.
   * @throws AssertionError - if the actual ICoordinateSquare is not opaque.
   */
  public ICoordinateSquareAssert isOpaque() {
    // check that actual ICoordinateSquare we want to make assertions on is not null.
    isNotNull();

    // check
    if (!actual.isOpaque()) {
      failWithMessage("\nExpecting that actual ICoordinateSquare is opaque but is not.");
    }
    
    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual ICoordinateSquare is not opaque.
   * @return this assertion object.
   * @throws AssertionError - if the actual ICoordinateSquare is opaque.
   */
  public ICoordinateSquareAssert isNotOpaque() {
    // check that actual ICoordinateSquare we want to make assertions on is not null.
    isNotNull();

    // check
    if (actual.isOpaque()) {
      failWithMessage("\nExpecting that actual ICoordinateSquare is not opaque but is.");
    }
    
    // return the current assertion for method chaining
    return this;
  }

}
